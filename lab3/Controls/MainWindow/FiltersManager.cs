using System;using System.Collections.Generic;using System.Reactive.Linq;using System.Reactive.Subjects;using System.Runtime.Serialization;using System.Xml.Serialization;using lab3.Controls.GL;namespace lab3.Controls.MainWindow;[DataContract]public class FiltersManager{    [DataMember] private BehaviorSubject<IEnumerable<Filter>> _selectedFilters;    public IObservable<IEnumerable<Filter>> SelectedFilters => _selectedFilters.AsObservable();    public IEnumerable<Filter> Filters { get; }    public FiltersManager(IEnumerable<Filter> filters)    {        Filters = filters;         _selectedFilters = new BehaviorSubject<IEnumerable<Filter>>(new Filter[]{});    }    public void EnableFilter(Filter filterToEnable)    {        var filters = new List<Filter>(_selectedFilters.Value);                foreach (var filter in filters)        {            if (filter.Name == filterToEnable.Name) return;        }                filters.Add(filterToEnable);        _selectedFilters.OnNext(filters);    }    public void DisableFilter(Filter filterToDisable)    {        var filters = new List<Filter>(_selectedFilters.Value);        for (int index = 0; index < filters.Count; index++)        {            if (filters[index].Name == filterToDisable.Name) continue;                        filters.RemoveAt(index);            _selectedFilters.OnNext(filters);            return;        }    }}