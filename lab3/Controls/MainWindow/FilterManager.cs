using System;using System.Collections.Generic;using System.Linq;using System.Reactive.Linq;using System.Reactive.Subjects;using System.Runtime.Serialization;using System.Xml.Serialization;using lab3.Controls.GL;using lab3.Serialization;using OpenTK.Graphics.OpenGL;namespace lab3.Controls.MainWindow;public class FilterManagerState{    public Filter[] SelectedFilters;    public FilterManagerState()    {        SelectedFilters = new Filter[] { };    }    public FilterManagerState(IEnumerable<Filter> selectedFilters)    {        SelectedFilters = new List<Filter>(selectedFilters).ToArray();    }}public class FilterManager{    private BehaviorSubject<IEnumerable<Filter>> _selectedFilters;    public IObservable<IEnumerable<Filter>> SelectedFilters => _selectedFilters.AsObservable();    public IEnumerable<Filter> AllFilters { get; private set; }    private IBackUpFilterManager _serializer;    public static FilterManager Deseralize()    {        var filters = new FilterSerializer("../../../Filters.xml").LoadFilters();        var serializer = new BackUpFilterManager("../../../FilterManagerBackUp.xml");        var allFilters = filters as Filter[] ?? filters.ToArray();        try        {            var instance = serializer.LoadBackUp();            return new FilterManager(allFilters, instance.SelectedFilters, serializer);        }        catch (Exception)        {            return new FilterManager(allFilters, new Filter[] { }, serializer);        }    }    private FilterManager(IEnumerable<Filter> allFilters, IEnumerable<Filter> selectedFilters,        IBackUpFilterManager serializer)    {        AllFilters = allFilters;        _serializer = serializer;        _selectedFilters = new BehaviorSubject<IEnumerable<Filter>>(selectedFilters);    }    public void EnableFilter(Filter filterToEnable)    {        var filters = new List<Filter>(_selectedFilters.Value);        foreach (var filter in filters)        {            if (filter.Name == filterToEnable.Name) return;        }        filters.Add(filterToEnable);        _selectedFilters.OnNext(filters);        _serializer.BackUp(new FilterManagerState(_selectedFilters.Value));    }    public void DisableFilter(Filter filterToDisable)    {        var filters = new List<Filter>(_selectedFilters.Value);        for (int index = 0; index < filters.Count; index++)        {            if (filters[index].Name != filterToDisable.Name) continue;            filters.RemoveAt(index);            _selectedFilters.OnNext(filters);            _serializer.BackUp(new FilterManagerState(_selectedFilters.Value));            return;        }    }}