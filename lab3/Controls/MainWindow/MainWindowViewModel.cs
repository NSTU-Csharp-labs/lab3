using System;using System.Collections.Generic;using System.Reactive;using System.Reactive.Disposables;using System.Reactive.Linq;using System.Threading.Tasks;using System.Xml.Serialization;using DynamicData;using lab3.Controls.GL;using lab3.ViewModels;using ReactiveUI;using SixLabors.ImageSharp;using SixLabors.ImageSharp.PixelFormats;using SixLabors.ImageSharp.Processing;namespace lab3.Controls.MainWindow;[Serializable]public class MainWindowViewModel : ViewModelBase, IActivatableViewModel{    private bool _isVisibleEffectsElements = false;    private bool _isVisibleEffectBtn = true;    private bool _isVisibleRotateBtn = true;    private bool _isVisibleDrawBtn = true;    private bool _isVisibleSaveBtn = true;    private bool _blackAndWhiteFilter = false;    private bool _blueFilter = false;    private bool _greenFilter = false;    private bool _redFilter = false;    private bool _isCheckedBW = false;    private bool _isCheckedR = false;    private bool _isCheckedG = false;    private bool _isCheckedB = false;    private BackUpSerializer _serializer;    public ImageManager ImageManager { get; }    public readonly Interaction<Unit, string[]> ShowOpenDirectoryDialog;    [field: NonSerialized]    [XmlIgnore]    public ImgBitmap Bitmap    {        get => _bitmap;        private set => this.RaiseAndSetIfChanged(ref _bitmap, value);    }    public ImgBitmap _bitmap;    public MainWindowViewModel()    {        Activator = new ViewModelActivator();        Bitmap = new ImgBitmap(0, 0, new byte[] { });        ImageManager = new ImageManager();        _serializer = new BackUpSerializer("../../../BackUp.xml");        ShowOpenDirectoryDialog = new Interaction<Unit, string[]>();        OpenImage = ReactiveCommand.CreateFromTask(OnOpenDirectory);        Rotate = ReactiveCommand.Create(ImageManager.DoRotation);        SwipeLeft = ReactiveCommand.Create(ImageManager.SwipeLeft);        SwipeRight = ReactiveCommand.Create(ImageManager.SwipeRight);        EnableEffects = ReactiveCommand.Create(() =>        {            BlueFilter = IsCheckedB;            GreenFilter = IsCheckedG;            RedFilter = IsCheckedR;            BlackAndWhiteFilter = IsCheckedBW;        });        OpenEffects = ReactiveCommand.Create(() =>        {            IsVisibleEffectsElements = true;            IsVisibleSaveBtn = false;            IsVisibleDrawBtn = false;            IsVisibleEffectBtn = false;            IsVisibleRotateBtn = false;        });        BackFromEffects = ReactiveCommand.Create(() =>        {            IsVisibleEffectsElements = false;            IsVisibleSaveBtn = true;            IsVisibleDrawBtn = true;            IsVisibleEffectBtn = true;            IsVisibleRotateBtn = true;        });        this.WhenActivated((d) =>            {                ImageManager.BitmapChanged.Subscribe((bitmap) => Bitmap = bitmap).DisposeWith(d);                ImageManager.DisposeWith(d);            }        );    }    private async Task OnOpenDirectory()    {        try        {            ImageManager.PicturesInFolder = await ShowOpenDirectoryDialog.Handle(Unit.Default);            await _serializer.BackUp(this);        }        catch (Exception)        {            ImageManager.ResetPictures();        }    }    public bool IsCheckedB    {        get => _isCheckedB;        set        {            this.RaiseAndSetIfChanged(ref _isCheckedB, value);            _serializer.BackUp(this);        }    }    public bool IsCheckedG    {        get => _isCheckedG;        set        {            this.RaiseAndSetIfChanged(ref _isCheckedG, value);            _serializer.BackUp(this);        }    }    public bool IsCheckedR    {        get => _isCheckedR;        set        {            this.RaiseAndSetIfChanged(ref _isCheckedR, value);            _serializer.BackUp(this);        }    }    public bool IsCheckedBW    {        get => _isCheckedBW;        set        {            this.RaiseAndSetIfChanged(ref _isCheckedBW, value);            _serializer.BackUp(this);        }    }    public bool BlackAndWhiteFilter    {        get => _blackAndWhiteFilter;        set        {            this.RaiseAndSetIfChanged(ref _blackAndWhiteFilter, value);            _serializer.BackUp(this);        }    }    public bool GreenFilter    {        get => _greenFilter;        set        {            this.RaiseAndSetIfChanged(ref _greenFilter, value);            _serializer.BackUp(this);        }    }    public bool RedFilter    {        get => _redFilter;        set        {            this.RaiseAndSetIfChanged(ref _redFilter, value);            _serializer.BackUp(this);        }    }    public bool BlueFilter    {        get => _blueFilter;        set        {            this.RaiseAndSetIfChanged(ref _blueFilter, value);            _serializer.BackUp(this);        }    }    public bool IsVisibleEffectBtn    {        get => _isVisibleEffectBtn;        set        {            this.RaiseAndSetIfChanged(ref _isVisibleEffectBtn, value);            _serializer.BackUp(this);        }    }    public bool IsVisibleSaveBtn    {        get => _isVisibleSaveBtn;        set        {            this.RaiseAndSetIfChanged(ref _isVisibleSaveBtn, value);            _serializer.BackUp(this);        }    }    public bool IsVisibleRotateBtn    {        get => _isVisibleRotateBtn;        set        {            this.RaiseAndSetIfChanged(ref _isVisibleRotateBtn, value);            _serializer.BackUp(this);        }    }    public bool IsVisibleDrawBtn    {        get => _isVisibleDrawBtn;        set        {            this.RaiseAndSetIfChanged(ref _isVisibleDrawBtn, value);            _serializer.BackUp(this);        }    }    public bool IsVisibleEffectsElements    {        get => _isVisibleEffectsElements;        set        {            this.RaiseAndSetIfChanged(ref _isVisibleEffectsElements, value);            _serializer.BackUp(this);        }    }    public ReactiveCommand<Unit, Unit> OpenEffects { get; }    public ReactiveCommand<Unit, Unit> EnableEffects { get; }    public ReactiveCommand<Unit, Unit> BackFromEffects { get; }    public ReactiveCommand<Unit, Unit> Rotate { get; }    public ReactiveCommand<Unit, Unit> SwipeLeft { get; }    public ReactiveCommand<Unit, Unit> SwipeRight { get; }    public ReactiveCommand<Unit, Unit> OpenImage { get; }    public ViewModelActivator Activator { get; }}