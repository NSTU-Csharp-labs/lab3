using System;using System.Reactive;using lab3.Controls.GL;using lab3.ViewModels;using ReactiveUI;using Svg;namespace lab3.Controls.MainWindow;public class MainWindowViewModel : ViewModelBase{    private bool _isVisibleEffectsElements = false;    private bool _isVisibleEffectBtn = true;    private bool _isVisibleRotateBtn = true;    private bool _isVisibleDrawBtn = true;    private bool _blackAndWhiteFilter = false;    private bool _blueFilter = false;    private bool _greenFilter = false;    private bool _redFilter = false;        public string PathTest => "../../../Assets/texture.jpg";        public MainWindowViewModel()    {        Test = ReactiveCommand.Create(() => Console.WriteLine("good"));        OpenEffects = ReactiveCommand.Create(() =>        {            IsVisibleEffectsElements = true;            IsVisibleDrawBtn = false;            IsVisibleEffectBtn = false;            IsVisibleRotateBtn = false;        });    }    public bool BlackAndWhiteFilter    {        get => _blackAndWhiteFilter;        set => this.RaiseAndSetIfChanged(ref _blackAndWhiteFilter, value);    }        public bool GreenFilter    {        get => _greenFilter;        set => this.RaiseAndSetIfChanged(ref _greenFilter, value);    }        public bool RedFilter    {        get => _redFilter;        set => this.RaiseAndSetIfChanged(ref _redFilter, value);    }        public bool BlueFilter    {        get => _blueFilter;        set => this.RaiseAndSetIfChanged(ref _blueFilter, value);    }        public bool IsVisibleEffectBtn    {        get => _isVisibleEffectBtn;        set => this.RaiseAndSetIfChanged(ref _isVisibleEffectBtn, value);    }        public bool IsVisibleRotateBtn    {        get => _isVisibleRotateBtn;        set => this.RaiseAndSetIfChanged(ref _isVisibleRotateBtn, value);    }        public bool IsVisibleDrawBtn    {        get => _isVisibleDrawBtn;        set => this.RaiseAndSetIfChanged(ref _isVisibleDrawBtn, value);    }        public bool IsVisibleEffectsElements    {        get => _isVisibleEffectsElements;        set => this.RaiseAndSetIfChanged(ref _isVisibleEffectsElements, value);    }        public ReactiveCommand<Unit, Unit> Test { get; }    public ReactiveCommand<Unit, Unit> OpenEffects { get; }}